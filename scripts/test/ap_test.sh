#!/bin/bash

# Source du syst√®me de logging
source "$(dirname "$(dirname "${BASH_SOURCE[0]}")")/common/logging.sh"

# Configuration
AP_SSID="MaxLink-NETWORK"
AP_IP="192.168.4.1"

# Variables de test
TESTS_TOTAL=0
TESTS_PASSED=0
TESTS_FAILED=0

# Initialisation du logging
init_logging "Tests et diagnostics du point d'acc√®s WiFi MaxLink-NETWORK"

# Fonction pour ex√©cuter un test
run_test() {
    local test_name="$1"
    local test_command="$2"
    
    TESTS_TOTAL=$((TESTS_TOTAL + 1))
    
    log_debug "Test $TESTS_TOTAL: $test_name"
    echo "Test $TESTS_TOTAL: $test_name"
    
    if eval "$test_command" > /dev/null 2>&1; then
        show_result "‚úì R√âUSSI: $test_name"
        TESTS_PASSED=$((TESTS_PASSED + 1))
        log_info "Test r√©ussi: $test_name"
        return 0
    else
        show_result "‚úó √âCHEC: $test_name"
        TESTS_FAILED=$((TESTS_FAILED + 1))
        log_error "Test √©chou√©: $test_name"
        return 1
    fi
}

# D√âMARRAGE
section_header "TESTS ET DIAGNOSTICS DU POINT D'ACC√àS MAXLINK"

log_info "D√©marrage des tests complets du point d'acc√®s WiFi MaxLink-NETWORK"

# TESTS PR√âLIMINAIRES
section_header "TESTS PR√âLIMINAIRES"

run_test "Privil√®ges administrateur" "[ \"\$EUID\" -eq 0 ]"
run_test "Installation de NetworkManager" "systemctl list-unit-files | grep -q 'NetworkManager.service'"
run_test "Service NetworkManager actif" "systemctl is-active --quiet NetworkManager"
run_test "Interface WiFi wlan0 pr√©sente" "ip link show wlan0"
run_test "Configuration point d'acc√®s existante" "nmcli connection show '$AP_SSID'"

# TESTS DE CONNECTIVIT√â
section_header "TESTS DE CONNECTIVIT√â"

run_test "Point d'acc√®s actif" "nmcli -g NAME connection show --active | grep -q '$AP_SSID'"
run_test "Adresse IP assign√©e" "ip addr show wlan0 | grep -q 'inet [0-9]'"
run_test "Interface en mode AP" "iw wlan0 info | grep -q 'type AP'"
run_test "Routage IP activ√©" "[ \"\$(cat /proc/sys/net/ipv4/ip_forward)\" = \"1\" ]"

# TESTS R√âSEAU AVANC√âS
section_header "TESTS R√âSEAU AVANC√âS"

log_info "Analyse d√©taill√©e de l'interface wlan0"
if ip addr show wlan0 > /dev/null 2>&1; then
    IP_INFO=$(ip addr show wlan0 | grep -o "inet [0-9.]*/[0-9]*" | head -1)
    if [ -n "$IP_INFO" ]; then
        show_result "‚úì Adresse IP: $IP_INFO"
        log_info "Adresse IP d√©tect√©e: $IP_INFO"
    else
        show_result "‚úó Aucune adresse IP configur√©e"
        log_error "Aucune adresse IP sur wlan0"
    fi
    
    MAC_INFO=$(ip addr show wlan0 | grep -o "link/ether [a-f0-9:]* " | cut -d' ' -f2)
    if [ -n "$MAC_INFO" ]; then
        show_result "‚úì Adresse MAC: $MAC_INFO"
        log_info "Adresse MAC: $MAC_INFO"
    else
        show_result "‚úó Adresse MAC non trouv√©e"
        log_error "Adresse MAC non trouv√©e"
    fi
else
    show_result "‚úó Interface wlan0 inaccessible"
    log_error "Interface wlan0 inaccessible"
fi

log_info "Informations d√©taill√©es du point d'acc√®s"
if iw wlan0 info > /dev/null 2>&1; then
    CHANNEL=$(iw wlan0 info 2>/dev/null | grep channel | awk '{print $2}' || echo "N/A")
    FREQ=$(iw wlan0 info 2>/dev/null | grep channel | awk '{print $4}' | tr -d '()' || echo "N/A")
    TYPE=$(iw wlan0 info 2>/dev/null | grep type | awk '{print $2}' || echo "N/A")
    
    echo "  ‚Ä¢ Type: $TYPE"
    echo "  ‚Ä¢ Canal: $CHANNEL"
    echo "  ‚Ä¢ Fr√©quence: $FREQ MHz"
    show_result "Informations r√©cup√©r√©es"
    log_info "AP Info - Type: $TYPE, Canal: $CHANNEL, Fr√©quence: $FREQ MHz"
else
    show_result "‚ö† Impossible de r√©cup√©rer les informations d√©taill√©es"
    log_warn "Impossible de r√©cup√©rer les informations iw"
fi

# TESTS DHCP ET DNS
section_header "TESTS DHCP ET DNS"

log_info "V√©rification du serveur DHCP"
if pgrep -f "dnsmasq" > /dev/null 2>&1; then
    DNSMASQ_PID=$(pgrep -f "dnsmasq" | head -1)
    show_result "‚úì Serveur DHCP (dnsmasq) actif (PID: $DNSMASQ_PID)"
    log_info "Serveur DHCP actif, PID: $DNSMASQ_PID"
    
    if [ -f /etc/NetworkManager/dnsmasq-shared.d/dhcp-range.conf ]; then
        DHCP_RANGE=$(cat /etc/NetworkManager/dnsmasq-shared.d/dhcp-range.conf | grep dhcp-range)
        show_result "‚úì Configuration DHCP: $DHCP_RANGE"
        log_info "Configuration DHCP: $DHCP_RANGE"
    else
        show_result "‚ö† Fichier de configuration DHCP non trouv√©"
        log_warn "Fichier de configuration DHCP manquant"
    fi
else
    show_result "‚ö† Serveur DHCP (dnsmasq) non d√©tect√©"
    log_warn "Serveur DHCP non d√©tect√©"
fi

run_test "Test de connectivit√© locale (ping localhost)" "ping -c 1 127.0.0.1"
run_test "Test de connectivit√© sur l'interface AP" "ping -c 1 $AP_IP -I wlan0"

# TESTS DE S√âCURIT√â
section_header "TESTS DE S√âCURIT√â"

log_info "V√©rification de la configuration de s√©curit√©"
SECURITY_CONFIG=$(nmcli connection show "$AP_SSID" | grep "802-11-wireless-security.key-mgmt" | awk '{print $2}' || echo "none")
if [ "$SECURITY_CONFIG" = "wpa-psk" ]; then
    show_result "‚úì S√©curit√© WPA2-PSK configur√©e"
    log_info "S√©curit√© WPA2-PSK configur√©e"
else
    show_result "‚ö† Configuration de s√©curit√©: $SECURITY_CONFIG"
    log_warn "Configuration de s√©curit√© inattendue: $SECURITY_CONFIG"
fi

PASSWORD_SET=$(nmcli connection show "$AP_SSID" | grep "802-11-wireless-security.psk:" | awk '{print $2}' || echo "none")
if [ "$PASSWORD_SET" != "none" ] && [ -n "$PASSWORD_SET" ]; then
    show_result "‚úì Mot de passe WPA2 configur√©"
    log_info "Mot de passe WPA2 configur√©"
else
    show_result "‚úó Mot de passe WPA2 non configur√©"
    log_error "Mot de passe WPA2 manquant"
fi

# CLIENTS CONNECT√âS
section_header "CLIENTS CONNECT√âS"

log_info "Recherche des clients connect√©s"
if command -v iw > /dev/null 2>&1; then
    CLIENTS_COUNT=$(iw dev wlan0 station dump 2>/dev/null | grep "Station" | wc -l || echo "0")
    if [ "$CLIENTS_COUNT" -gt 0 ]; then
        show_result "‚úì $CLIENTS_COUNT client(s) connect√©(s)"
        log_info "$CLIENTS_COUNT clients connect√©s"
        
        echo "D√©tails des clients connect√©s :"
        iw dev wlan0 station dump 2>/dev/null | while read line; do
            if echo "$line" | grep -q "Station"; then
                MAC=$(echo "$line" | awk '{print $2}')
                echo "  ‚Ä¢ Client MAC: $MAC"
                log_debug "Client connect√©: $MAC"
            elif echo "$line" | grep -q "signal:"; then
                SIGNAL=$(echo "$line" | awk '{print $2}')
                echo "    Signal: $SIGNAL dBm"
            elif echo "$line" | grep -q "connected time:"; then
                TIME=$(echo "$line" | cut -d':' -f2- | xargs)
                echo "    Connect√© depuis: $TIME"
                echo ""
            fi
        done
        show_result "D√©tails affich√©s"
    else
        show_result "‚Ñπ Aucun client actuellement connect√©"
        log_info "Aucun client connect√©"
    fi
else
    show_result "‚ö† Commande 'iw' non disponible pour lister les clients"
    log_warn "Commande iw non disponible"
fi

# TESTS DE PERFORMANCE
section_header "TESTS DE PERFORMANCE"

log_info "Tests de performance syst√®me"
if command -v iperf3 > /dev/null 2>&1; then
    show_result "‚Ñπ iperf3 disponible pour tests de performance"
    log_info "iperf3 disponible"
else
    show_result "‚Ñπ iperf3 non install√© (optionnel pour tests de performance)"
    log_info "iperf3 non disponible"
fi

CPU_USAGE=$(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | cut -d'%' -f1 || echo "N/A")
MEM_USAGE=$(free | grep Mem | awk '{printf "%.1f", $3/$2 * 100.0}' || echo "N/A")
show_result "CPU: ${CPU_USAGE}% | M√©moire: ${MEM_USAGE}%"
log_info "Performance - CPU: ${CPU_USAGE}%, M√©moire: ${MEM_USAGE}%"

# TESTS DE CONFIGURATION AUTOMATIQUE
section_header "TESTS DE CONFIGURATION AUTOMATIQUE"

run_test "D√©marrage automatique configur√©" "nmcli -g connection.autoconnect connection show '$AP_SSID' | grep -q 'yes'"
run_test "Service NetworkManager au d√©marrage" "systemctl is-enabled NetworkManager | grep -q 'enabled'"

# R√âSUM√â DES TESTS
section_header "R√âSUM√â DES TESTS"

log_info "Tests termin√©s - Total: $TESTS_TOTAL, R√©ussis: $TESTS_PASSED, √âchou√©s: $TESTS_FAILED"

echo "R√©sultats des tests :"
echo "‚Ä¢ Tests ex√©cut√©s: $TESTS_TOTAL"
echo "‚Ä¢ Tests r√©ussis: $TESTS_PASSED"
echo "‚Ä¢ Tests √©chou√©s: $TESTS_FAILED"

if [ $TESTS_FAILED -eq 0 ]; then
    echo ""
    echo "üéâ TOUS LES TESTS SONT R√âUSSIS !"
    echo "Le point d'acc√®s MaxLink-NETWORK fonctionne parfaitement."
    
    cat << "EOF"
  _______ ______  _____ _______ _____ 
 |__   __|  ____|/ ____|__   __/ ____|
    | |  | |__  | (___    | | | (___  
    | |  |  __|  \___ \   | |  \___ \ 
    | |  | |____ ____) |  | |  ____) |
    |_|  |______|_____/   |_| |_____/ 

EOF
    
    show_result "Point d'acc√®s '$AP_SSID' : √âtat optimal !"
    log_info "Tous les tests r√©ussis - √âtat optimal"
    
elif [ $TESTS_FAILED -le 2 ]; then
    echo ""
    echo "‚ö†Ô∏è  TESTS MAJORITAIREMENT R√âUSSIS"
    echo "Le point d'acc√®s fonctionne mais quelques optimisations sont possibles."
    show_result "Point d'acc√®s '$AP_SSID' : √âtat fonctionnel avec avertissements"
    log_warn "Tests majoritairement r√©ussis avec quelques avertissements"
    
else
    echo ""
    echo "‚ùå PLUSIEURS TESTS ONT √âCHOU√â"
    echo "Le point d'acc√®s n√©cessite une attention particuli√®re."
    show_result "Point d'acc√®s '$AP_SSID' : Probl√®mes d√©tect√©s"
    log_error "Plusieurs tests ont √©chou√©"
    
    echo ""
    echo "Actions recommand√©es :"
    echo "‚Ä¢ V√©rifiez les logs d√©taill√©s"
    echo "‚Ä¢ Red√©marrez le point d'acc√®s : sudo bash scripts/start/ap_start.sh"
    echo "‚Ä¢ En cas de probl√®me persistant, r√©installez : sudo bash scripts/install/ap_install.sh"
fi

log_info "Red√©marrage programm√© dans 10 secondes"
echo "Le syst√®me va red√©marrer dans 10 secondes..."
for i in {10..1}; do
    echo -ne "\rRed√©marrage dans $i secondes..."
    sleep 1
done
echo ""

log_info "Red√©marrage du syst√®me"
reboot